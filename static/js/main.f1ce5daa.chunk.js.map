{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","username","email","pass","accept","message","errors","messages","username_incorrect","email_incorrect","password_incorrect","accept_incorrect","handleChange","e","name","target","type","value","_this","setState","Object","defineProperty","checked","handleSubmit","preventDefault","validation","formValidation","correct","password","this","length","indexOf","_this2","console","log","setTimeout","react_default","a","createElement","className","onSubmit","noValidate","htmlFor","id","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1ce5daa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    username: '',\n    email: '',\n    pass: '',\n    accept: false,\n    message: '',\n\n    errors: {\n      username: false,\n      email: false,\n      pass: false,\n      accept: false,\n    }\n  }\n\n  messages = {\n    username_incorrect: 'Nazwa musi być dłuższa niż 10 znaków i nie może zawierać spacji',\n    email_incorrect: 'Brak @ w emailu',\n    password_incorrect: 'Hasło musi mieć 8 znaków',\n    accept_incorrect: 'Nie potwierdzona zgoda'\n  }\n\n  handleChange = (e) => {\n    const name = e.target.name;\n    const type = e.target.type;\n    if (type === \"text\" || type === \"password\" || type === \"email\") {\n      const value = e.target.value;\n      // const checked = e.target.checked;\n      this.setState({\n        [name]: value\n      })\n    } else if (type === \"checkbox\") {\n      const checked = e.target.checked;\n      this.setState({\n        [name]: checked\n      })\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n\n    const validation = this.formValidation()\n    // console.log(validation)\n\n    if (validation.correct) {\n      this.setState({\n        username: '',\n        email: '',\n        pass: '',\n        accept: false,\n        message: 'Formularz został wysłany',\n\n        errors: {\n          username: false,\n          email: false,\n          pass: false,\n          accept: false,\n        }\n      })\n    } else {\n      this.setState({\n        errors: {\n          username: !validation.username,\n          email: !validation.email,\n          pass: !validation.password,\n          accept: !validation.accept\n        }\n      })\n    }\n  }\n\n  formValidation() {\n    // true - ok\n    // false - zle\n    let username = false;\n    let email = false;\n    let password = false;\n    let accept = false;\n    let correct = false;\n\n    if (this.state.username.length > 10 && this.state.username.indexOf(' ') === -1) {\n      username = true;\n    }\n\n    if (this.state.email.indexOf('@') !== -1) {\n      email = true;\n    }\n\n    if (this.state.pass.length === 8) {\n      password = true;\n    }\n\n    if (this.state.accept) {\n      accept = true\n    }\n\n    if (username && email && password && accept) {\n      correct = true\n    }\n\n    return ({\n      correct,\n      username,\n      email,\n      password,\n      accept\n    })\n  }\n\n  componentDidUpdate() {\n    console.log(\"update\");\n    if (this.state.message !== '') {\n      setTimeout(() => this.setState({\n        message: ''\n      }), 3000)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit} noValidate>\n          <label htmlFor=\"user\">Twoje imie:\n          <input type=\"text\" id=\"user\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n            {this.state.errors.username && <span>{this.messages.username_incorrect}</span>}\n          </label>\n\n          <label htmlFor=\"email\">Twój email:\n          <input type=\"email\" id=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n            {this.state.errors.email && <span>{this.messages.email_incorrect}</span>}\n          </label>\n\n          <label htmlFor=\"password\">Twoje hasło:\n          <input type=\"password\" id=\"password\" name=\"pass\" value={this.state.pass} onChange={this.handleChange} />\n            {this.state.errors.pass && <span>{this.messages.password_incorrect}</span>}\n          </label>\n          <label htmlFor=\"accept\">\n            <input type=\"checkbox\" id=\"accept\" name=\"accept\" checked={this.state.accept} onChange={this.handleChange} /> Wyrażam zgody wszelakie\n          </label>\n          {this.state.errors.accept && <span>{this.messages.accept_incorrect}</span>}\n          <button>Zapisz się</button>\n        </form>\n        {this.state.message && <h3>{this.state.message}</h3>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}